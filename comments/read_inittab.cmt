/*
 * @brief 读取 /etc/inittab 文件，解析其中的约定规则，形成一个 CHILD 链表数据结构中。
 *
 * @details 函数执行流程分析：

	该函数中用到的重要数据结构有 CHILD (struct _child_) 和 actions 数组 (struct actions)

	1. 读取 /etc/inittab 文件，按行读取，到 buf 数组中。

	2. 遇到开头是空格或者TAB制表符的行，忽略直到第一个字母，如果发现是第一个字母是#开头的注释，或者\n开头的空行，都直接跳过。

	3. 使用 strsep 函数，以 : 冒号作为间隔符号，依次找到 id, rlevel, action, process 这4个字段，分别代表的含义可参考下面的详细说明。同时将 action 字段中的字符串关键字转换为整型数 actionNo，方便后面的判别。

	4. 检查当前的 id 字段，是否是唯一的，如果之前已经出现过，则忽略掉。

	5. 通过 imalloc 函数，动态分配 CHILD 结构体节点ch，结构体的定义见上面。然后将刚才分析的结果填入结构体中，并将这个节点，添加到链表 newFamily 中。其中包括 actionNo 填入 ch->action, id 填入 ch->id, process 填入 ch->process 等。

	6. 关闭 /etc/inittab 文件。

	7. 接下来，查看老的启动进程列表 family，看是否有进程需要被杀死的。这里有两轮检查，第一轮会给所有没有在新的运行级别中定义的进程发送一个警告信号 SIGTERM。如果在第一轮中有这样的进程，则会等待5秒，然后进入下一轮检查。在第2轮检查中，它会发送 SIGKILL 信号来强制中止所有子进程的运行。

	8. 等所有子进程被杀死后，init 通过调用 write_utmp_wtmp() 来将终止信息和原因记录进这两个文件中。记录的信息包括子进程在 inittab 文件中的 id，子进程本身的 pid 等。

	9. 这2个步骤7，8完成之后，init 开始清除老的 family 链表上的所有节点，释放空间。

	10. 最后 init 把刚才新建成的 newFamily 链表赋值给 -> family 链表，完成重建链表的操作即结束。
 *
 */

