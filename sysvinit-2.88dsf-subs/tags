!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCTON_OFF	src/shutdown.c	39;"	d	file:
ADDSET	src/set.h	26;"	d
BIN	src/Makefile	/^BIN	=$/;"	m
BINSH	src/sulogin.c	59;"	d	file:
BIN_COMBO	src/Makefile	/^BIN_COMBO	= $(BIN_OWNER):$(BIN_GROUP)$/;"	m
BIN_GROUP	src/Makefile	/^BIN_GROUP	= root$/;"	m
BIN_OWNER	src/Makefile	/^BIN_OWNER	= root$/;"	m
BMAGIC_HALT	src/reboot.h	35;"	d
BMAGIC_HALT	src/reboot.h	37;"	d
BMAGIC_HARD	src/reboot.h	27;"	d
BMAGIC_POWEROFF	src/reboot.h	43;"	d
BMAGIC_POWEROFF	src/reboot.h	45;"	d
BMAGIC_POWEROFF	src/reboot.h	47;"	d
BMAGIC_REBOOT	src/reboot.h	40;"	d
BMAGIC_SOFT	src/reboot.h	31;"	d
BOOT	src/init.h	69;"	d
BOOTWAIT	src/init.h	70;"	d
BTMP_FILE	src/last.c	253;"	d	file:
CBAUD	src/init.c	87;"	d	file:
CBAUDEX	src/init.c	90;"	d	file:
CFLAGS	src/Makefile	/^CFLAGS	?= -ansi -O2 -fomit-frame-pointer$/;"	m
CHANGE_WAIT	src/init.h	26;"	d
CHECK_DES	src/sulogin.c	54;"	d	file:
CHECK_MD5	src/sulogin.c	55;"	d	file:
CHILD	src/init.h	/^} CHILD;$/;"	t	typeref:struct:_child_
CHOP_DOMAIN	src/last.c	54;"	d	file:
CONSOLE	src/paths.h	26;"	d
CPPFLAGS	src/Makefile	/^CPPFLAGS =$/;"	m
CTRLALTDEL	src/init.h	74;"	d
C_ACTION	src/init.h	133;"	d
C_END	src/init.h	128;"	d
C_EOF	src/init.h	137;"	d
C_EOR	src/init.h	130;"	d
C_EXS	src/init.h	136;"	d
C_FLAG	src/init.h	132;"	d
C_LEV	src/init.h	131;"	d
C_PID	src/init.h	135;"	d
C_PROCESS	src/init.h	134;"	d
C_REC	src/init.h	129;"	d
C_VER	src/init.h	127;"	d
DATE	src/init.c	11;"	d	file:
DEBUG	src/init.h	29;"	d
DELSET	src/set.h	25;"	d
DEMAND	src/init.h	100;"	d
DEV_BASE	src/hddown.c	407;"	d	file:
DEV_BASE	src/hddown.c	61;"	d	file:
DISK_EXTFLUSH	src/hddown.c	72;"	d	file:
DISK_FLUSHONLY	src/hddown.c	75;"	d	file:
DISK_IS_IDE	src/hddown.c	70;"	d	file:
DISK_IS_SATA	src/hddown.c	71;"	d	file:
DISK_MANAGED	src/hddown.c	74;"	d	file:
DISK_REMOVABLE	src/hddown.c	73;"	d	file:
DO_NETFS	src/killall5.c	63;"	d	file:
DO_STAT	src/killall5.c	64;"	d	file:
D_DIDBOOT	src/init.h	145;"	d
D_GOTSIGN	src/init.h	141;"	d
D_PREVLEVEL	src/init.h	140;"	d
D_RUNLEVEL	src/init.h	138;"	d
D_SLTIME	src/init.h	144;"	d
D_THISLEVEL	src/init.h	139;"	d
D_WROTE_UTMP_REBOOT	src/init.h	143;"	d
D_WROTE_UTMP_RLEVEL	src/init.h	147;"	d
D_WROTE_WTMP_REBOOT	src/init.h	142;"	d
D_WROTE_WTMP_RLEVEL	src/init.h	146;"	d
EMPTYSET	src/set.h	27;"	d
ENOIOCTLCMD	src/bootlogd.c	267;"	d	file:
E_VERSION	src/init.c	105;"	d	file:
FAILING	src/init.h	101;"	d
FASTBOOT	src/paths.h	32;"	d
FORCEFSCK	src/paths.h	33;"	d
F_PASSWD	src/sulogin.c	57;"	d	file:
F_SHADOW	src/sulogin.c	58;"	d	file:
HAVE_UPDWTMP	src/utmp.c	44;"	d	file:
HAVE_UPDWTMP	src/utmp.c	46;"	d	file:
HAVE_UPDWTMP	src/utmp.c	49;"	d	file:
HOST_NAME_MAX	src/dowall.c	45;"	d	file:
ID	src/Makefile	/^ID		= $(shell id -u)$/;"	m
IDBYTES	src/hddown.c	65;"	d	file:
INIT	src/paths.h	30;"	d
INITDBG	src/init.h	60;"	d
INITDBG	src/init.h	62;"	d
INITDEBUG	src/init.h	30;"	d
INITDEFAULT	src/init.h	77;"	d
INITLIBS	src/Makefile	/^  INITLIBS	=$/;"	m
INITPID	src/init.h	33;"	d
INITRQ_HLEN	src/initreq.h	45;"	d
INITRQ_HLEN	src/initreq.h	47;"	d
INITSCRIPT	src/paths.h	37;"	d
INITTAB	src/paths.h	29;"	d
INIT_CMD_BSD	src/initreq.h	40;"	d
INIT_CMD_POWERFAIL	src/initreq.h	37;"	d
INIT_CMD_POWERFAILNOW	src/initreq.h	38;"	d
INIT_CMD_POWEROK	src/initreq.h	39;"	d
INIT_CMD_RUNLVL	src/initreq.h	36;"	d
INIT_CMD_SETENV	src/initreq.h	41;"	d
INIT_CMD_START	src/initreq.h	35;"	d
INIT_CMD_UNSETENV	src/initreq.h	42;"	d
INIT_FIFO	src/initreq.h	29;"	d
INIT_FIFO	src/initreq.h	31;"	d
INIT_MAGIC	src/initreq.h	34;"	d
INSTALL_DATA	src/Makefile	/^  INSTALL_DATA	= install -m 644$/;"	m
INSTALL_DATA	src/Makefile	/^  INSTALL_DATA	= install -o $(BIN_OWNER) -g $(BIN_GROUP) -m 644$/;"	m
INSTALL_DIR	src/Makefile	/^INSTALL_DIR	= install -m 755 -d$/;"	m
INSTALL_EXEC	src/Makefile	/^  INSTALL_EXEC	= install -m 755$/;"	m
INSTALL_EXEC	src/Makefile	/^  INSTALL_EXEC	= install -o $(BIN_OWNER) -g $(BIN_GROUP) -m 755$/;"	m
IRFFLAGS	src/ifdown.c	103;"	d	file:
IRFFLAGS	src/ifdown.c	92;"	d	file:
ISMEMBER	src/set.h	24;"	d
ISPOWER	src/init.c	147;"	d	file:
ISSPACE	src/hddown.c	62;"	d	file:
IUCLC	src/sulogin.c	72;"	d	file:
KBREQUEST	src/init.h	80;"	d
KERNEL_MONITOR	src/halt.c	64;"	d	file:
KILLME	src/init.h	99;"	d
LOGFILE	src/bootlogd.c	59;"	d	file:
L_CO	src/init.h	107;"	d
L_SY	src/init.h	108;"	d
L_VB	src/init.h	109;"	d
MAN1	src/Makefile	/^MAN1	= last.1 lastb.1 mesg.1$/;"	m
MAN5	src/Makefile	/^MAN5	= initscript.5 inittab.5$/;"	m
MAN8	src/Makefile	/^MAN8	= halt.8 init.8 killall5.8 pidof.8 poweroff.8 reboot.8 runlevel.8$/;"	m
MANDIR	src/Makefile	/^MANDIR		= \/usr\/share\/man$/;"	m
MASK_EXT	src/hddown.c	66;"	d	file:
MAXLEN	src/wall.c	36;"	d	file:
MAXLINES	src/wall.c	37;"	d	file:
MAXSPAWN	src/init.h	38;"	d
MAX_DISKS	src/hddown.c	405;"	d	file:
MAX_IFS	src/ifdown.c	38;"	d	file:
MESSAGELEN	src/shutdown.c	64;"	d	file:
MNT_DETACH	src/init.c	59;"	d	file:
NEWINIT	obsolete/powerd.c	43;"	d	file:
NEW_UTMP	src/last.c	55;"	d	file:
NFS	src/killall5.c	/^} NFS;$/;"	t	typeref:struct:_s_nfs	file:
NOLOGIN	src/paths.h	31;"	d
NO_PROCESS	src/init.h	112;"	d
NO_STAT	src/killall5.c	65;"	d	file:
NR_EXTRA_ENV	src/init.c	214;"	d	file:
OFF	src/init.h	75;"	d
OLD_HOSTSIZE	src/oldutmp.h	28;"	d
OLD_LINESIZE	src/oldutmp.h	26;"	d
OLD_NAMESIZE	src/oldutmp.h	27;"	d
OLD_UTMP_H	src/oldutmp.h	24;"	d
OMIT	src/killall5.c	/^} OMIT;$/;"	t	typeref:struct:_s_omit	file:
ONCE	src/init.h	68;"	d
ONDEMAND	src/init.h	76;"	d
PATH_DEFAULT	src/init.h	43;"	d
PIDOF_NETFS	src/killall5.c	847;"	d	file:
PIDOF_OMIT	src/killall5.c	846;"	d	file:
PIDOF_SINGLE	src/killall5.c	845;"	d	file:
PIDQ	src/killall5.c	/^} PIDQ;$/;"	t	typeref:struct:pidq	file:
PIDQ_HEAD	src/killall5.c	/^} PIDQ_HEAD;$/;"	t	typeref:struct:__anon1	file:
PIPE_FD	src/init.h	34;"	d
POWERFAIL	src/init.h	71;"	d
POWERFAILNOW	src/init.h	79;"	d
POWEROKWAIT	src/init.h	73;"	d
POWERWAIT	src/init.h	72;"	d
PROC	src/killall5.c	/^} PROC;$/;"	t	typeref:struct:proc	file:
PROC_IDE	src/hddown.c	406;"	d	file:
PWRSTAT	src/paths.h	39;"	d
PWRSTAT_OLD	src/paths.h	38;"	d
R	src/fstab-decode.c	43;"	d	file:
R	src/fstab-decode.c	49;"	d	file:
RESPAWN	src/init.h	66;"	d
RUNLVL_PICKY	src/halt.c	65;"	d	file:
RUNNING	src/init.h	98;"	d
R_CRASH	src/last.c	67;"	d	file:
R_DOWN	src/last.c	68;"	d	file:
R_NORMAL	src/last.c	69;"	d	file:
R_NOW	src/last.c	70;"	d	file:
R_PHANTOM	src/last.c	72;"	d	file:
R_REBOOT	src/last.c	71;"	d	file:
R_TIMECHANGE	src/last.c	73;"	d	file:
SBIN	src/Makefile	/^SBIN	= init halt shutdown runlevel killall5 fstab-decode$/;"	m
SDALLOW	src/paths.h	28;"	d
SDPID	src/paths.h	34;"	d
SECURETTY	src/paths.h	27;"	d
SELINUX_DEF	src/Makefile	/^  SELINUX_DEF	=  -DWITH_SELINUX$/;"	m
SELINUX_DEF	src/Makefile	/^  SELINUX_DEF	=$/;"	m
SETSIG	src/init.c	94;"	d	file:
SHADOW	src/killall5.c	/^} SHADOW;$/;"	t	typeref:struct:_s_shadow	file:
SHELL	src/paths.h	35;"	d
SHUTDOWN_TIME	src/last.c	49;"	d	file:
SIGPWR	obsolete/powerd.c	62;"	d	file:
SIGPWR	src/init.c	83;"	d	file:
SLEEPTIME	src/init.h	40;"	d
STACK_DEBUG	src/init.c	66;"	d	file:
STATE_PIPE	src/init.h	35;"	d
STATIC	src/Makefile	/^STATIC	=$/;"	m
STATICSH	src/sulogin.c	60;"	d	file:
STATNAMELEN	src/killall5.c	62;"	d	file:
SULOGIN	src/paths.h	36;"	d
SULOGINLIBS	src/Makefile	/^  SULOGINLIBS	= -lselinux	$/;"	m
SULOGINLIBS	src/Makefile	/^  SULOGINLIBS	=$/;"	m
SYSINIT	src/init.h	78;"	d
SYS_BLK	src/hddown.c	59;"	d	file:
SYS_CLASS	src/hddown.c	60;"	d	file:
Signature	src/init.c	/^const char *Signature = "12567362";	\/* Signature for re-exec fd *\/$/;"	v
TESTTIME	src/init.h	39;"	d
TEST_EXT	src/hddown.c	67;"	d	file:
TTYGRP	src/mesg.c	36;"	d	file:
UCHUNKSIZE	src/last.c	56;"	d	file:
USE_SYSFS	src/hddown.c	42;"	d	file:
USRBIN	src/Makefile	/^USRBIN	= last mesg$/;"	m
VERSION	contrib/start-stop-daemon.c	21;"	d	file:
VERSION	src/init.c	10;"	d	file:
VT_MASTER	src/paths.h	25;"	d
Version	src/bootlogd.c	/^char *Version = "@(#) bootlogd 2.86 03-Jun-2004 miquels@cistron.nl";$/;"	v
Version	src/halt.c	/^char *Version = "@(#)halt  2.86  31-Jul-2004 miquels@cistron.nl";$/;"	v
Version	src/init.c	/^char *Version = "@(#) init " VERSION "  " DATE "  miquels@cistron.nl";$/;"	v
Version	src/killall5.c	/^char *Version = "@(#)killall5 2.86 31-Jul-2004 miquels@cistron.nl";$/;"	v
Version	src/last.c	/^char *Version = "@(#) last 2.85 31-Apr-2004 miquels";$/;"	v
Version	src/mesg.c	/^char *Version = "@(#) mesg 2.81 31-Jul-2001 miquels@cistron.nl";$/;"	v
Version	src/shutdown.c	/^char *Version = "@(#) shutdown 2.86-1 31-Jul-2004 miquels@cistron.nl";$/;"	v
Version	src/sulogin.c	/^char *Version = "@(#)sulogin 2.85-3 23-Apr-2003 miquels@cistron.nl";$/;"	v
Version	src/wall.c	/^char *Version = "@(#) wall 2.79 12-Sep-2000 miquels@cistron.nl";$/;"	v
WAIT	src/init.h	67;"	d
WAITING	src/init.h	102;"	d
WIN_FLUSH_CACHE	src/hddown.c	216;"	d	file:
WIN_FLUSH_CACHE_EXT	src/hddown.c	213;"	d	file:
WIN_IDENTIFY	src/hddown.c	344;"	d	file:
WIN_STANDBYNOW1	src/hddown.c	207;"	d	file:
WIN_STANDBYNOW1	src/hddown.c	490;"	d	file:
WIN_STANDBYNOW2	src/hddown.c	210;"	d	file:
WIN_STANDBYNOW2	src/hddown.c	493;"	d	file:
XECUTED	src/init.h	104;"	d
ZOMBIE	src/init.h	103;"	d
_GNU_SOURCE	src/hddown.c	25;"	d	file:
_GNU_SOURCE	src/shutdown.c	36;"	d	file:
_INITREQ_H	src/initreq.h	24;"	d
_PATH_DEV	src/dowall.c	42;"	d	file:
_child_	src/init.h	/^typedef struct _child_ {$/;"	s
_s_nfs	src/killall5.c	/^typedef struct _s_nfs$/;"	s	file:
_s_omit	src/killall5.c	/^typedef struct _s_omit {$/;"	s	file:
_s_shadow	src/killall5.c	/^typedef struct _s_shadow$/;"	s	file:
act	src/init.c	/^  int act;$/;"	m	struct:actions	file:
action	src/init.h	/^  int action;			\/* what to do (see list below) *\/$/;"	m	struct:_child_
actions	src/init.c	/^struct actions {$/;"	s	file:
actions	src/init.c	/^} actions[] = {$/;"	v	typeref:struct:actions
add_pid_to_q	src/killall5.c	/^int add_pid_to_q(PIDQ_HEAD *q, PROC *p)$/;"	f
alignof	src/killall5.c	147;"	d	file:
alrm_handler	obsolete/powerd.c	/^void alrm_handler()$/;"	f
alrm_handler	src/shutdown.c	/^void alrm_handler(int sig)$/;"	f
alrm_handler	src/sulogin.c	/^void alrm_handler(int sig __attribute__((unused)))$/;"	f	file:
altlist	src/last.c	/^int altlist = 0;	\/* Show hostname at the end. *\/$/;"	v
argv0	src/init.c	/^char *argv0;			\/* First arguments; show up in ps listing *\/$/;"	v
argv0	src/killall5.c	/^	char *argv0;		\/* Name as found out from argv[0] *\/$/;"	m	struct:proc	file:
argv0base	src/killall5.c	/^	char *argv0base;	\/* `basename argv[1]`		  *\/$/;"	m	struct:proc	file:
argv1	src/killall5.c	/^	char *argv1;		\/* Name as found out from argv[1] *\/$/;"	m	struct:proc	file:
argv1base	src/killall5.c	/^	char *argv1base;	\/* `basename argv[1]`		  *\/$/;"	m	struct:proc	file:
ask_runlevel	src/init.c	/^int ask_runlevel(void)$/;"	f	file:
badusage	contrib/start-stop-daemon.c	/^badusage(const char *msg)$/;"	f	file:
boot_transitions	src/init.c	/^void boot_transitions()$/;"	f	file:
bootmsg	src/init.c	/^char *bootmsg = "version " VERSION " %s";$/;"	v
bsd	src/initreq.h	/^		struct init_request_bsd	bsd;$/;"	m	union:init_request::__anon4	typeref:struct:init_request::__anon4::init_request_bsd
buf	src/bootlogd.c	/^	char buf[256];$/;"	m	struct:line	file:
ch_emerg	src/init.c	/^CHILD ch_emerg = {		\/* Emergency shell *\/$/;"	v
check	contrib/start-stop-daemon.c	/^check(int pid)$/;"	f	file:
check4nfs	src/killall5.c	/^int check4nfs(const char * path, char * real)$/;"	f
check_init_fifo	src/init.c	/^void check_init_fifo(void)$/;"	f	file:
check_pipe	src/init.c	/^int check_pipe(int fd)$/;"	f	file:
chld_handler	src/init.c	/^void chld_handler(int sig __attribute__((unused)))$/;"	f	file:
clean_env	src/shutdown.c	/^char *clean_env[] = {$/;"	v
cleanse	src/utmpdump.c	109;"	d	file:
clear_mnt	src/killall5.c	/^static void clear_mnt(void)$/;"	f	file:
clear_shadow	src/killall5.c	/^static void clear_shadow(SHADOW *restrict shadow)$/;"	f	file:
cmd	src/init.c	/^  int cmd;$/;"	m	struct:__anon2	file:
cmd	src/initreq.h	/^	int	cmd;			\/* What kind of request         *\/$/;"	m	struct:init_request
cmdline	src/bootlogd.c	/^	char	*cmdline;$/;"	m	struct:consdev	file:
cmdname	contrib/start-stop-daemon.c	/^static const char *cmdname = NULL;$/;"	v	file:
cmds	src/init.c	/^} cmds[] = {$/;"	v	typeref:struct:__anon2
consdev	src/bootlogd.c	/^struct consdev {$/;"	s	file:
consdev	src/bootlogd.c	/^} consdev[] = {$/;"	v	typeref:struct:consdev
console_dev	src/init.c	/^char *console_dev;		\/* Console device. *\/$/;"	v
console_init	src/init.c	/^void console_init(void)$/;"	f	file:
console_open	src/init.c	/^int console_open(int mode)$/;"	f	file:
console_stty	src/init.c	/^void console_stty(void)$/;"	f	file:
consolename	src/bootlogd.c	/^int consolename(char *res, int rlen)$/;"	f
cont_handler	src/init.c	/^void cont_handler(int sig __attribute__((unused)))$/;"	f	file:
coredump	src/init.c	/^void coredump(void)$/;"	f	file:
count	src/init.h	/^  int count;			\/* Times respawned in the last 2 minutes *\/$/;"	m	struct:_child_
createlogfile	src/bootlogd.c	/^int createlogfile = 0;$/;"	v
data	src/initreq.h	/^		char			data[368];$/;"	m	union:init_request::__anon4
decode	src/fstab-decode.c	/^decode(char *s)$/;"	f	file:
defcons	src/bootlogd.c	/^char *defcons[] = { "tty0", "hvc0", "ttyS0", "ttySC0", "ttyB0", NULL };$/;"	v
dev	src/killall5.c	/^	dev_t dev;		\/* Device it is on		  *\/$/;"	m	struct:proc	file:
dev1	src/bootlogd.c	/^	char	*dev1;$/;"	m	struct:consdev	file:
dev2	src/bootlogd.c	/^	char	*dev2;$/;"	m	struct:consdev	file:
dfl_level	src/init.c	/^int dfl_level = 0;		\/* Default runlevel *\/$/;"	v
did_boot	src/init.c	/^int did_boot = 0;		\/* Did we already do BOOT* stuff? *\/$/;"	v
didnl	src/bootlogd.c	/^int didnl = 1;$/;"	v
dns_lookup	src/last.c	/^int dns_lookup(char *result, int size, int useip, int32_t *a)$/;"	f
do_help	contrib/start-stop-daemon.c	/^do_help(void)$/;"	f	file:
do_pidfile	contrib/start-stop-daemon.c	/^do_pidfile(const char *name)$/;"	f	file:
do_power_fail	src/init.c	/^void do_power_fail(int pwrstat)$/;"	f	file:
do_procfs	contrib/start-stop-daemon.c	/^do_procfs(void)$/;"	f	file:
do_shutdown	src/halt.c	/^void do_shutdown(char *fl, char *tm)$/;"	f
do_sleep	src/init.c	/^void do_sleep(int sec)$/;"	f	file:
do_standby_disk	src/hddown.c	/^static int do_standby_disk(char *device, unsigned int flags)$/;"	f	file:
do_standby_disk	src/hddown.c	/^static int do_standby_disk(int fd)$/;"	f	file:
do_standby_disks	src/hddown.c	/^static int do_standby_disks(const int *fds, int count)$/;"	f	file:
do_stop	contrib/start-stop-daemon.c	/^do_stop(void)$/;"	f	file:
domain_len	src/last.c	/^int domain_len = 16;	\/* Default print 16 characters of domain *\/$/;"	v
domainname	src/last.c	/^char *domainname;	\/* Our domainname. *\/$/;"	v
donologin	src/shutdown.c	/^void donologin(int min)$/;"	f
dontshut	src/shutdown.c	/^int dontshut = 0;	\/* Don't shutdown, only warn	*\/$/;"	v
doself	src/shutdown.c	/^int doself = 0;		\/* Don't use init		*\/$/;"	v
dostat	src/mountpoint.c	/^int dostat(char *path, struct stat *st, int do_lstat, int quiet)$/;"	f
dosync	src/shutdown.c	/^int dosync = 1;		\/* Sync before reboot or halt	*\/$/;"	v
down_level	src/shutdown.c	/^char down_level[2];	\/* What runlevel to go to.	*\/$/;"	v
dump	src/utmpdump.c	/^dump(FILE *fp, int forever, int oldfmt)$/;"	f
emerg_shell	src/init.c	/^int emerg_shell = 0;		\/* Start emergency shell? *\/$/;"	v
empty_q	src/killall5.c	/^int empty_q(PIDQ_HEAD *q)$/;"	f
endptr	src/bootlogd.c	/^char *endptr = ringbuf + sizeof(ringbuf);$/;"	v
exec_name	src/initreq.h	/^	char	exec_name[128];	        \/* Program to execute           *\/$/;"	m	struct:init_request_bsd
exec_stat	contrib/start-stop-daemon.c	/^static struct stat exec_stat;$/;"	v	typeref:struct:stat	file:
execname	contrib/start-stop-daemon.c	/^static char *execname = NULL;$/;"	v	file:
exitnodo	contrib/start-stop-daemon.c	/^static int exitnodo = 1;$/;"	v	file:
exstat	src/init.h	/^  int exstat;			\/* Exit status of process *\/$/;"	m	struct:_child_
extra_env	src/init.c	/^char *extra_env[NR_EXTRA_ENV];$/;"	v
fail_cancel	src/init.c	/^void fail_cancel(void)$/;"	f	file:
fail_check	src/init.c	/^void fail_check(void)$/;"	f	file:
family	src/init.c	/^CHILD *family = NULL;		\/* The linked list of all entries *\/$/;"	v
fastboot	src/shutdown.c	/^int fastboot = 0;	\/* Do a 'fast' reboot		*\/$/;"	v
fastdown	src/shutdown.c	/^void fastdown()$/;"	f
fatal	contrib/start-stop-daemon.c	/^fatal(const char *format, ...)$/;"	f	file:
feputs	src/dowall.c	/^static void feputs(const char *line, FILE *fp)$/;"	f	file:
fifo_new_level	src/init.c	/^void fifo_new_level(int level)$/;"	f	file:
file_isatty	src/dowall.c	/^static int file_isatty(const char *fname)$/;"	f	file:
find_idedisks	src/hddown.c	/^static int find_idedisks(const char **dev, int maxdev, int *count)$/;"	f	file:
find_scsidisks	src/hddown.c	/^static int find_scsidisks(const char **dev, int maxdev, int *count)$/;"	f	file:
findpty	src/bootlogd.c	/^int findpty(int *master, int *slave, char *name)$/;"	f
findtty	src/bootlogd.c	/^static int findtty(char *res, const char *startdir, int rlen, dev_t dev)$/;"	f	file:
fixtty	src/sulogin.c	/^void fixtty(void)$/;"	f	file:
flags	src/init.c	/^} flags[]={$/;"	v	typeref:struct:__anon3
flags	src/init.h	/^  int flags;			\/* Status of this entry *\/$/;"	m	struct:_child_
flush_cache_ext	src/hddown.c	/^static int flush_cache_ext(const char *device)$/;"	f	file:
forcefsck	src/shutdown.c	/^int forcefsck = 0;	\/* Force fsck on reboot		*\/$/;"	v
found	contrib/start-stop-daemon.c	/^static struct pid_list *found = NULL;$/;"	v	typeref:struct:pid_list	file:
fulltime	src/last.c	/^int fulltime = 0;	\/* Print full dates and times *\/$/;"	v
gen_id	src/initreq.h	/^	char	gen_id[8];		\/* Beats me.. telnetd uses "fe" *\/$/;"	m	struct:init_request_bsd
get_cmd	src/init.c	/^static int get_cmd(FILE *f)$/;"	f	file:
get_init_default	src/init.c	/^int get_init_default(void)$/;"	f	file:
get_next_from_pid_q	src/killall5.c	/^PROC *get_next_from_pid_q(PIDQ_HEAD *q)$/;"	f
get_record	src/init.c	/^static CHILD *get_record(FILE *f)$/;"	f	file:
get_runlevel	src/halt.c	/^int get_runlevel(void)$/;"	f
get_string	src/init.c	/^static int get_string(char *p, int size, FILE *f)$/;"	f	file:
get_void	src/init.c	/^static int get_void(FILE *f)$/;"	f	file:
getbtmp	src/last.c	/^char *getbtmp()$/;"	f
getpasswd	src/sulogin.c	/^char *getpasswd(char *crypted)$/;"	f	file:
getrootpwent	src/sulogin.c	/^struct passwd *getrootpwent(int try_manually)$/;"	f	file:
gettok	src/utmpdump.c	/^gettok(char *line, char *dest, int size, int eatspace)$/;"	f
getuidtty	src/dowall.c	/^static void getuidtty(char **userp, char **ttyp)$/;"	f	file:
got_alrm	src/shutdown.c	/^int got_alrm = 0;$/;"	v
got_cont	src/init.c	/^sig_atomic_t got_cont = 0;	\/* Set if we received the SIGCONT signal *\/$/;"	v
got_signal	src/bootlogd.c	/^int got_signal = 0;$/;"	v
got_signals	src/init.c	/^sig_atomic_t got_signals;	\/* Set if we received a signal. *\/$/;"	v
handler	src/bootlogd.c	/^void handler(int sig)$/;"	f
handler	src/dowall.c	/^static void handler(int arg __attribute__((unused)))$/;"	f	file:
hardsleep	src/shutdown.c	/^void hardsleep(int secs)$/;"	f
hasttygrp	src/mesg.c	/^int hasttygrp(void)$/;"	f
hddown	src/hddown.c	/^int hddown(void)$/;"	f
hdflush	src/hddown.c	/^int hdflush(void)$/;"	f
hdopen	src/hddown.c	/^static FILE *hdopen(const char* const format, const char* const name)$/;"	f	file:
head	src/killall5.c	/^	PIDQ		*head;$/;"	m	struct:__anon1	file:
host	src/initreq.h	/^	char	host[INITRQ_HLEN];	\/* Hostname                     *\/$/;"	m	struct:init_request_bsd
hostname	src/last.c	/^char hostname[256];	\/* For gethostbyname() *\/$/;"	v
i	src/initreq.h	/^	} i;$/;"	m	struct:init_request	typeref:union:init_request::__anon4
id	src/init.h	/^  char id[8];			\/* Inittab id (must be unique) *\/$/;"	m	struct:_child_
ifdown	src/ifdown.c	/^int ifdown(void)$/;"	f
imalloc	src/init.c	/^void *imalloc(size_t size)$/;"	f	file:
init_buildenv	src/init.c	/^char **init_buildenv(int child)$/;"	f
init_freeenv	src/init.c	/^void init_freeenv(char **e)$/;"	f
init_main	src/init.c	/^void init_main(void)$/;"	f	file:
init_nfs	src/killall5.c	/^void init_nfs(void)$/;"	f
init_pid_q	src/killall5.c	/^PIDQ_HEAD *init_pid_q(PIDQ_HEAD *q)$/;"	f
init_reboot	src/reboot.h	50;"	d
init_request	src/initreq.h	/^struct init_request {$/;"	s
init_request_bsd	src/initreq.h	/^struct init_request_bsd {$/;"	s
init_setenv	src/shutdown.c	/^int init_setenv(char *name, char *value)$/;"	f
initcmd_setenv	src/init.c	/^void initcmd_setenv(char *data, int size)$/;"	f	file:
initlog	src/init.c	/^void initlog(int loglevel, char *s, ...)$/;"	f
inline	src/killall5.c	141;"	d	file:
ino	src/killall5.c	/^	ino_t ino;		\/* Inode number			  *\/$/;"	m	struct:proc	file:
inptr	src/bootlogd.c	/^char *inptr  = ringbuf;$/;"	v
int_handler	src/last.c	/^void int_handler()$/;"	f
isconsole	src/bootlogd.c	/^int isconsole(char *s, char *res, int rlen)$/;"	f
isnetfs	src/killall5.c	/^static inline int isnetfs(const char * type)$/;"	f	file:
istrdup	src/init.c	/^char *istrdup(char *s)$/;"	f	file:
jbuf	src/dowall.c	/^static sigjmp_buf jbuf;$/;"	v	file:
kernel	src/killall5.c	/^	char kernel;		\/* Kernel thread or zombie.	  *\/$/;"	m	struct:proc	file:
killed	contrib/start-stop-daemon.c	/^static struct pid_list *killed = NULL;$/;"	v	typeref:struct:pid_list	file:
lastdate	src/last.c	/^time_t lastdate;	\/* Last date we've seen *\/$/;"	v
line	src/bootlogd.c	/^struct line {$/;"	s	file:
line	src/bootlogd.c	/^} line;$/;"	v	typeref:struct:line
list	src/last.c	/^int list(struct utmp *p, time_t t, int what)$/;"	f
list_disks	src/hddown.c	/^static char *list_disks(DIR* blk, unsigned int* flags)$/;"	f	file:
magic	src/initreq.h	/^	int	magic;			\/* Magic number                 *\/$/;"	m	struct:init_request
main	contrib/start-stop-daemon.c	/^main(int argc, char **argv)$/;"	f
main	obsolete/powerd.c	/^int main(int argc, char **argv)$/;"	f
main	src/bootlogd.c	/^int main(int argc, char **argv)$/;"	f
main	src/fstab-decode.c	/^main (int argc, char *argv[])$/;"	f
main	src/halt.c	/^int main(int argc, char **argv)$/;"	f
main	src/hddown.c	/^int main(int argc, char **argv)$/;"	f
main	src/init.c	/^int main(int argc, char **argv)$/;"	f
main	src/killall5.c	/^int main(int argc, char **argv)$/;"	f
main	src/last.c	/^int main(int argc, char **argv)$/;"	f
main	src/mesg.c	/^int main(int argc, char **argv)$/;"	f
main	src/mountpoint.c	/^int main(int argc, char **argv)$/;"	f
main	src/runlevel.c	/^int main(argc, argv)$/;"	f
main	src/shutdown.c	/^int main(int argc, char **argv)$/;"	f
main	src/sulogin.c	/^int main(int argc, char **argv)$/;"	f
main	src/utmpdump.c	/^int main(int argc, char **argv)$/;"	f
main	src/wall.c	/^int main(int argc, char **argv)$/;"	f
main_pidof	src/killall5.c	/^int main_pidof(int argc, char **argv)$/;"	f
make_pipe	src/init.c	/^int make_pipe(int fd)$/;"	f	file:
mask	src/init.c	/^	int mask;$/;"	m	struct:__anon3	file:
maxproclen	src/init.c	/^int maxproclen;			\/* Maximal length of argv[0] with \\0 *\/$/;"	v
maxrecs	src/last.c	/^int maxrecs = 0;	\/* Maximum number of records to list. *\/$/;"	v
message	src/shutdown.c	/^char message[MESSAGELEN];	\/* Warning message	*\/$/;"	v
mount_proc	src/killall5.c	/^int mount_proc(void)$/;"	f
mybasename	src/last.c	/^char *mybasename(char *s)$/;"	f
myname	src/init.c	/^char *myname="\/sbin\/init";	\/* What should we exec *\/$/;"	v
name	src/init.c	/^	char *name;$/;"	m	struct:__anon3	file:
name	src/init.c	/^  char *name;$/;"	m	struct:actions	file:
name	src/init.c	/^  char name[4];	$/;"	m	struct:__anon2	file:
name	src/killall5.c	/^	char * name;$/;"	m	struct:_s_nfs	file:
name	src/killall5.c	/^	char * name;$/;"	m	struct:_s_shadow	file:
name_len	src/last.c	/^int name_len = 8;	\/* Default print 8 characters of name *\/$/;"	v
needwarning	src/shutdown.c	/^static int needwarning(int wt)$/;"	f	file:
newFamily	src/init.c	/^CHILD *newFamily = NULL;	\/* The list after inittab re-read *\/$/;"	v
newstate	src/shutdown.c	/^char newstate[64];	\/* What are we gonna do		*\/$/;"	v
newtoold	src/utmpdump.c	/^newtoold(struct utmp src)$/;"	f
next	contrib/start-stop-daemon.c	/^	struct pid_list *next;$/;"	m	struct:pid_list	typeref:struct:pid_list::pid_list	file:
next	src/init.h	/^  struct _child_ *next;		\/* For the linked list *\/$/;"	m	struct:_child_	typeref:struct:_child_::_child_
next	src/killall5.c	/^	PIDQ		*next;$/;"	m	struct:__anon1	file:
next	src/killall5.c	/^	struct _s_nfs *next;	\/* Pointer to next struct. *\/$/;"	m	struct:_s_nfs	typeref:struct:_s_nfs::_s_nfs	file:
next	src/killall5.c	/^	struct _s_omit *next;$/;"	m	struct:_s_omit	typeref:struct:_s_omit::_s_omit	file:
next	src/killall5.c	/^	struct _s_shadow *next;$/;"	m	struct:_s_shadow	typeref:struct:_s_shadow::_s_shadow	file:
next	src/killall5.c	/^	struct pidq	*next;$/;"	m	struct:pidq	typeref:struct:pidq::pidq	file:
next	src/killall5.c	/^	struct proc *next;	\/* Pointer to next struct. 	  *\/$/;"	m	struct:proc	typeref:struct:proc::proc	file:
next	src/last.c	/^  struct utmplist *next;$/;"	m	struct:utmplist	typeref:struct:utmplist::utmplist	file:
nfs	src/killall5.c	/^	char nfs;		\/* Name found on network FS.	  *\/$/;"	m	struct:proc	file:
nlen	src/killall5.c	/^	size_t nlen;$/;"	m	struct:_s_nfs	file:
nlen	src/killall5.c	/^	size_t nlen;$/;"	m	struct:_s_shadow	file:
nlist	src/killall5.c	/^NFS *nlist;$/;"	v
nsyslog	src/killall5.c	/^void nsyslog(int pri, char *fmt, ...)$/;"	f
oldfmt	src/last.c	/^int oldfmt = 0;		\/* Use old libc5 format? *\/$/;"	v
oldtonew	src/utmpdump.c	/^oldtonew(struct oldutmp src)$/;"	f
oldutmp	src/oldutmp.h	/^struct oldutmp {$/;"	s
omit	src/killall5.c	/^OMIT *omit;$/;"	v
oops_error	src/init.c	/^int oops_error;			\/* Used by some of the re-exec code. *\/$/;"	v
open_disk	src/hddown.c	/^static int open_disk(const char *device)$/;"	f	file:
open_disks	src/hddown.c	/^static int open_disks(const char **disks, int *fds, int count)$/;"	f	file:
open_nb	src/bootlogd.c	/^int open_nb(char *buf)$/;"	f
outptr	src/bootlogd.c	/^char *outptr = ringbuf;$/;"	v
parse_options	contrib/start-stop-daemon.c	/^parse_options(int argc, char * const *argv)$/;"	f	file:
parsetm	src/last.c	/^time_t parsetm(char *ts)$/;"	f
pid	contrib/start-stop-daemon.c	/^	int pid;$/;"	m	struct:pid_list	file:
pid	src/init.h	/^  int pid;			\/* Pid of this process *\/$/;"	m	struct:_child_
pid	src/initreq.h	/^	int	pid;			\/* Process to send to           *\/$/;"	m	struct:init_request_bsd
pid	src/killall5.c	/^	pid_t pid;		\/* Process ID.			  *\/$/;"	m	struct:proc	file:
pid	src/killall5.c	/^	pid_t pid;$/;"	m	struct:_s_omit	file:
pid_is_cmd	contrib/start-stop-daemon.c	/^pid_is_cmd(int pid, const char *name)$/;"	f	file:
pid_is_exec	contrib/start-stop-daemon.c	/^pid_is_exec(int pid, const struct stat *esb)$/;"	f	file:
pid_is_user	contrib/start-stop-daemon.c	/^pid_is_user(int pid, int uid)$/;"	f	file:
pid_list	contrib/start-stop-daemon.c	/^struct pid_list {$/;"	s	file:
pidfile	contrib/start-stop-daemon.c	/^static const char *pidfile = NULL;$/;"	v	file:
pidof	src/killall5.c	/^PIDQ_HEAD *pidof(char *prog)$/;"	f
pidq	src/killall5.c	/^typedef struct pidq {$/;"	s	file:
pipe_fd	src/init.c	/^int pipe_fd = -1;		\/* \/dev\/initctl *\/$/;"	v
plist	src/killall5.c	/^PROC *plist;$/;"	v
pos	src/bootlogd.c	/^	int pos;$/;"	m	struct:line	file:
powerfail	obsolete/powerd.c	/^void powerfail(ok)$/;"	f
prev	src/killall5.c	/^	struct _s_nfs *prev;	\/* Pointer to previous st. *\/$/;"	m	struct:_s_nfs	typeref:struct:_s_nfs::_s_nfs	file:
prev	src/killall5.c	/^	struct _s_omit *prev;$/;"	m	struct:_s_omit	typeref:struct:_s_omit::_s_omit	file:
prev	src/killall5.c	/^	struct _s_shadow *prev;$/;"	m	struct:_s_shadow	typeref:struct:_s_shadow::_s_shadow	file:
prev	src/last.c	/^  struct utmplist *prev;$/;"	m	struct:utmplist	typeref:struct:utmplist::utmplist	file:
prevlevel	src/init.c	/^char prevlevel = 'N';		\/* Previous runlevel *\/$/;"	v
print	src/init.c	/^void print(char *s)$/;"	f
print_utline	src/utmpdump.c	/^print_utline(struct utmp ut)$/;"	f
proc	src/killall5.c	/^	PROC		*proc;$/;"	m	struct:pidq	file:
proc	src/killall5.c	/^typedef struct proc {$/;"	s	file:
process	src/init.h	/^  char process[128];		\/* The command line *\/$/;"	m	struct:_child_
process_signals	src/init.c	/^void process_signals()$/;"	f	file:
profile	src/sulogin.c	/^static int profile;$/;"	v	file:
progname	contrib/start-stop-daemon.c	/^static const char *progname = "";$/;"	v	file:
progname	src/halt.c	/^char *progname;$/;"	v
progname	src/killall5.c	/^char *progname;	\/* the name of the running program *\/$/;"	v
progname	src/last.c	/^char *progname;		\/* Name of this program *\/$/;"	v
push	contrib/start-stop-daemon.c	/^push(struct pid_list **list, int pid)$/;"	f	file:
quietmode	contrib/start-stop-daemon.c	/^static int quietmode = 0;$/;"	v	file:
quit_handler	src/last.c	/^void quit_handler()$/;"	f
re_exec	src/init.c	/^void re_exec(void)$/;"	f	file:
read_inittab	src/init.c	/^void read_inittab(void)$/;"	f	file:
read_level	src/init.c	/^int read_level(int arg)$/;"	f	file:
readarg	src/killall5.c	/^int readarg(FILE *fp, char *buf, int sz)$/;"	f
readproc	src/killall5.c	/^int readproc(int do_stat)$/;"	f
receive_state	src/init.c	/^int receive_state(int fd)$/;"	f	file:
recsdone	src/last.c	/^int recsdone = 0;	\/* Number of records listed *\/$/;"	v
redo_utmp_wtmp	src/init.c	/^void redo_utmp_wtmp(void)$/;"	f	file:
reload	src/init.c	/^int reload = 0;			\/* Should we do initialization stuff? *\/$/;"	v
reserved	src/initreq.h	/^	char	reserved[128];		\/* For future expansion.        *\/$/;"	m	struct:init_request_bsd
restrict	src/killall5.c	144;"	d	file:
ringbuf	src/bootlogd.c	/^char ringbuf[32768];$/;"	v
rlevel	src/init.h	/^  char rlevel[12];		\/* run levels *\/$/;"	m	struct:_child_
runlevel	src/init.c	/^char runlevel = 'S';		\/* The current run level *\/$/;"	v
runlevel	src/initreq.h	/^	int	runlevel;		\/* Runlevel to change to        *\/$/;"	m	struct:init_request
saved_sigint	src/sulogin.c	/^static void (*saved_sigint)  = SIG_DFL;$/;"	v	file:
saved_sigquit	src/sulogin.c	/^static void (*saved_sigquit) = SIG_DFL;$/;"	v	file:
saved_sigtstp	src/sulogin.c	/^static void (*saved_sigtstp) = SIG_DFL;$/;"	v	file:
scripts_too	src/killall5.c	/^int scripts_too = 0;$/;"	v
segv_handler	src/init.c	/^void segv_handler(int sig __attribute__((unused)))$/;"	f
segv_handler	src/init.c	/^void segv_handler(int sig __attribute__((unused)), struct sigcontext ctx)$/;"	f	file:
send_state	src/init.c	/^void send_state(int fd)$/;"	f	file:
sent_sigstop	src/killall5.c	/^int sent_sigstop;$/;"	v
set	src/sulogin.c	/^void set(char **var, char *val)$/;"	f	file:
setproctitle	src/init.c	/^static int setproctitle(char *fmt, ...)$/;"	f	file:
shadow	src/killall5.c	/^	SHADOW *shadow;		\/* Pointer to shadows      *\/$/;"	m	struct:_s_nfs	file:
shadow	src/killall5.c	/^static int shadow(SHADOW *restrict this, const char *restrict name, const size_t nlen)$/;"	f	file:
show	src/last.c	/^char **show = NULL;	\/* What do they want us to show *\/$/;"	v
showdate	src/last.c	/^char *showdate()$/;"	f
showhost	src/last.c	/^int showhost = 1;	\/* Show hostname too? *\/$/;"	v
shutdown	src/shutdown.c	/^void shutdown(char *halttype)$/;"	f
sid	src/killall5.c	/^	pid_t sid;		\/* Session ID.			  *\/$/;"	m	struct:proc	file:
signal	src/initreq.h	/^	int	signal;			\/* Signal to send               *\/$/;"	m	struct:init_request_bsd
signal_handler	src/init.c	/^void signal_handler(int sig)$/;"	f	file:
signal_nr	contrib/start-stop-daemon.c	/^static int signal_nr = 15;$/;"	v	file:
sleeptime	src/initreq.h	/^	int	sleeptime;		\/* Time between TERM and KILL   *\/$/;"	m	struct:init_request
sltime	src/init.c	/^int sltime = 5;			\/* Sleep time between TERM and KILL *\/$/;"	v
sltime	src/shutdown.c	/^char *sltime = 0;	\/* Sleep time			*\/$/;"	v
spawn	src/init.c	/^pid_t spawn(CHILD *ch, int *res)$/;"	f	file:
spawn	src/shutdown.c	/^int spawn(int noerr, char *prog, ...)$/;"	f
start	contrib/start-stop-daemon.c	/^static int start = 0;$/;"	v	file:
start_if_needed	src/init.c	/^void start_if_needed(void)$/;"	f	file:
startas	contrib/start-stop-daemon.c	/^static char *startas = NULL;$/;"	v	file:
startup	src/init.c	/^void startup(CHILD *ch)$/;"	f	file:
statname	src/killall5.c	/^	char *statname;		\/* the statname without braces    *\/$/;"	m	struct:proc	file:
stop	contrib/start-stop-daemon.c	/^static int stop = 0;$/;"	v	file:
stop_handler	src/init.c	/^void stop_handler(int sig __attribute__((unused)))$/;"	f	file:
stopit	src/shutdown.c	/^void stopit(int sig __attribute__((unused)))$/;"	f
strstrip	src/hddown.c	/^static char *strstrip(char *str)$/;"	f	file:
strtotime	src/utmpdump.c	/^strtotime(const char *s_time)$/;"	f
sushell	src/sulogin.c	/^void sushell(struct passwd *pwd)$/;"	f	file:
syncalot	src/bootlogd.c	/^int syncalot = 0;$/;"	v
tail	src/killall5.c	/^	PIDQ		*tail;$/;"	m	struct:__anon1	file:
telinit	src/init.c	/^int telinit(char *progname, int argc, char **argv)$/;"	f	file:
term_type	src/initreq.h	/^	char	term_type[16];		\/* Terminal type                *\/$/;"	m	struct:init_request_bsd
testmode	contrib/start-stop-daemon.c	/^static int testmode = 0;$/;"	v	file:
thislevel	src/init.c	/^char thislevel = 'S';		\/* The current runlevel *\/$/;"	v
timeout	src/sulogin.c	/^static int timeout;$/;"	v	file:
timetostr	src/utmpdump.c	/^timetostr(const time_t time)$/;"	f
tm	src/init.h	/^  time_t tm;			\/* When respawned last *\/$/;"	m	struct:_child_
tty_id	src/initreq.h	/^	char	tty_id[16];		\/* Tty name minus \/dev\/tty      *\/$/;"	m	struct:init_request_bsd
tty_in_ttygrp	src/mesg.c	/^int tty_in_ttygrp(struct stat *st)$/;"	f
uconv	src/last.c	/^void uconv(struct oldutmp *oldut, struct utmp *utn)$/;"	f
ufile	src/last.c	/^char *ufile;		\/* Filename of this file *\/$/;"	v
undump	src/utmpdump.c	/^undump(FILE *fp, int forever __attribute__((unused)), int oldfmt)$/;"	f
unspace	src/utmpdump.c	/^unspace(char *s, int len)$/;"	f
uread	src/last.c	/^int uread(FILE *fp, struct utmp *u, int *quit)$/;"	f
usage	src/bootlogd.c	/^void usage(void)$/;"	f
usage	src/halt.c	/^void usage(void)$/;"	f
usage	src/init.c	/^void usage(char *s)$/;"	f	file:
usage	src/killall5.c	/^void usage(void)$/;"	f
usage	src/last.c	/^void usage(char *s)$/;"	f
usage	src/mountpoint.c	/^void usage(void) {$/;"	f
usage	src/shutdown.c	/^void usage(void)$/;"	f
usage	src/sulogin.c	/^void usage(void)$/;"	f	file:
usage	src/utmpdump.c	/^usage(int result)$/;"	f
usedns	src/last.c	/^int usedns = 0;		\/* Use DNS to lookup the hostname. *\/$/;"	v
useip	src/last.c	/^int useip = 0;		\/* Print IP address in number format *\/$/;"	v
user_id	contrib/start-stop-daemon.c	/^static int user_id = -1;$/;"	v	file:
userspec	contrib/start-stop-daemon.c	/^static const char *userspec = NULL;$/;"	v	file:
ut	src/last.c	/^  struct utmp ut;$/;"	m	struct:utmplist	typeref:struct:utmplist::utmp	file:
ut_host	src/oldutmp.h	/^	char	ut_host[OLD_HOSTSIZE];$/;"	m	struct:oldutmp
ut_id	src/oldutmp.h	/^	char	ut_id[4];$/;"	m	struct:oldutmp
ut_line	src/oldutmp.h	/^	char	ut_line[OLD_LINESIZE];$/;"	m	struct:oldutmp
ut_oldaddr	src/oldutmp.h	/^	long	ut_oldaddr;$/;"	m	struct:oldutmp
ut_oldtime	src/oldutmp.h	/^	long	ut_oldtime;$/;"	m	struct:oldutmp
ut_pid	src/oldutmp.h	/^	int	ut_pid;$/;"	m	struct:oldutmp
ut_type	src/oldutmp.h	/^	short	ut_type;$/;"	m	struct:oldutmp
ut_user	src/oldutmp.h	/^	char	ut_user[OLD_NAMESIZE];$/;"	m	struct:oldutmp
utmplist	src/last.c	/^struct utmplist *utmplist = NULL;$/;"	v	typeref:struct:utmplist
utmplist	src/last.c	/^struct utmplist {$/;"	s	file:
utproto	src/init.c	/^struct utmp utproto;		\/* Only used for sizeof(utproto.ut_id) *\/$/;"	v	typeref:struct:utmp
v_hddown	src/hddown.c	/^char *v_hddown = "@(#)hddown.c  1.02  22-Apr-2003  miquels@cistron.nl";$/;"	v
v_ifdown	src/ifdown.c	/^char *v_ifdown = "@(#)ifdown.c  1.11  02-Jun-1998  miquels@cistron.nl";$/;"	v
valid	src/sulogin.c	/^int valid(const char *pass)$/;"	f	file:
wall	src/dowall.c	/^void wall(const char *text, int remote)$/;"	f
warn	src/shutdown.c	/^void warn(int mins)$/;"	f
write_err	src/bootlogd.c	/^int write_err(int pts, int realfd, char *realcons, int e)$/;"	f
write_utmp	src/utmp.c	/^static void write_utmp($/;"	f	file:
write_utmp_wtmp	src/utmp.c	/^void write_utmp_wtmp($/;"	f
write_wtmp	src/utmp.c	/^void write_wtmp($/;"	f
writelog	src/bootlogd.c	/^void writelog(FILE *fp, unsigned char *ptr, int len)$/;"	f
wrote_utmp_reboot	src/init.c	/^int wrote_utmp_reboot = 1;	\/* Set when we wrote the reboot record *\/$/;"	v
wrote_utmp_rlevel	src/init.c	/^int wrote_utmp_rlevel = 1;	\/* Set when we wrote the runlevel record *\/$/;"	v
wrote_wtmp_reboot	src/init.c	/^int wrote_wtmp_reboot = 1;	\/* Set when we wrote the reboot record *\/$/;"	v
wrote_wtmp_rlevel	src/init.c	/^int wrote_wtmp_rlevel = 1;	\/* Set when we wrote the runlevel record *\/$/;"	v
xcleanse	src/utmpdump.c	/^xcleanse(char *s, int len)$/;"	f
xmalloc	contrib/start-stop-daemon.c	/^xmalloc(int size)$/;"	f	file:
xmalloc	src/killall5.c	/^static void *xmalloc(size_t bytes)$/;"	f	file:
xmemalign	src/killall5.c	/^static inline void xmemalign(void **memptr, size_t alignment, size_t size)$/;"	f	file:
